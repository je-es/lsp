{"version":3,"sources":["../lib/lsp.ts","../lib/utils/diagnostics.ts","../lib/utils/common.ts","../lib/utils/constants.ts","../lib/utils/completion.ts","../lib/utils/hover.ts","../lib/utils/settings.ts","../lib/utils/metrics.ts"],"sourcesContent":["// lsp.ts — A customizable language server protocol with full integration with vscode.\r\n//\r\n// Developed with ❤️ by Maysara.\r\n\r\n\r\n\r\n// ╔════════════════════════════════════════ PACK ════════════════════════════════════════╗\r\n\r\n    import { Connection, TextDocuments, InitializeParams, InitializeResult, DidChangeConfigurationNotification, TextDocumentSyncKind, }\r\n                                    from 'vscode-languageserver';\r\n    import { TextDocument }         from 'vscode-languageserver-textdocument';\r\n    import * as ProjectLib          from '@je-es/project';\r\n    import type { Syntax }          from '@je-es/syntax';\r\n    import { DiagnosticsHandler }   from './utils/diagnostics';\r\n    import { CompletionHandler }    from './utils/completion';\r\n    import { HoverHandler }         from './utils/hover';\r\n    import { SettingsManager }      from './utils/settings';\r\n    import { MetricsHandler }       from './utils/metrics';\r\n\r\n// ╚══════════════════════════════════════════════════════════════════════════════════════╝\r\n\r\n\r\n\r\n// ╔════════════════════════════════════════ TYPE ════════════════════════════════════════╗\r\n\r\n    export interface LSPConfig {\r\n        syntax          : Syntax;\r\n        rootPath        : string;\r\n    }\r\n\r\n    export interface ServerMetrics {\r\n        totalValidations: number;\r\n        totalErrors: number;\r\n        averageValidationTime: number;\r\n        cacheHitRate: number;\r\n    }\r\n\r\n// ╚══════════════════════════════════════════════════════════════════════════════════════╝\r\n\r\n\r\n\r\n// ╔════════════════════════════════════════ CORE ════════════════════════════════════════╗\r\n\r\n    export class LSP {\r\n        private connection  : Connection;\r\n        private documents   : TextDocuments<TextDocument>;\r\n        private config      : LSPConfig;\r\n\r\n        // Projects\r\n        private projects: { main: ProjectLib.Project; anonymous: ProjectLib.Project } | null = null;\r\n\r\n        // Feature handlers\r\n        private diagnosticsHandler!: DiagnosticsHandler;\r\n        private completionHandler!: CompletionHandler;\r\n        private hoverHandler!: HoverHandler;\r\n        private settingsManager!: SettingsManager;\r\n        private metricsHandler!: MetricsHandler;\r\n\r\n        // Capabilities\r\n        private hasConfigurationCapability = true;\r\n        private hasWorkspaceFolderCapability = false;\r\n\r\n        // Server metrics\r\n        private serverMetrics: ServerMetrics = {\r\n            totalValidations: 0,\r\n            totalErrors: 0,\r\n            averageValidationTime: 0,\r\n            cacheHitRate: 0\r\n        };\r\n\r\n        constructor(connection: Connection, documents: TextDocuments<TextDocument>, config: LSPConfig) {\r\n            this.connection = connection;\r\n            this.documents = documents;\r\n            this.config = config;\r\n\r\n            this.initializeProjects();\r\n            this.initializeHandlers();\r\n        }\r\n\r\n        private initializeProjects(): void {\r\n            try {\r\n                console.log('[LSP] Initializing projects...');\r\n\r\n                // Load main project config\r\n                const mainProjectConfig = ProjectLib.Project.loadConfigFromPath(this.config.rootPath);\r\n                console.log('[LSP] Config loaded:', mainProjectConfig.name || 'anonymous');\r\n\r\n                // Create main project\r\n                const mainProject = ProjectLib.Project.create(\r\n                    this.config.rootPath,\r\n                    {\r\n                        config: mainProjectConfig,\r\n                        syntax: this.config.syntax,\r\n                        isAnonymous: false,\r\n                    }\r\n                );\r\n                console.log('[LSP] Main project created');\r\n\r\n                // Create anonymous project for untitled/external files\r\n                const anonProject = ProjectLib.Project.createAnonymous(this.config.syntax);\r\n                console.log('[LSP] Anonymous project created');\r\n\r\n                this.projects = { main: mainProject, anonymous: anonProject };\r\n\r\n                // Initialize the main project's program\r\n                this.projects.main.initializeProgram();\r\n                console.log('[LSP] Program initialized');\r\n\r\n            } catch (error) {\r\n                console.error('[LSP] Failed to initialize projects:', error);\r\n                throw error;\r\n            }\r\n        }\r\n\r\n        private initializeHandlers(): void {\r\n            if (!this.projects) {\r\n                throw new Error('Projects must be initialized before handlers');\r\n            }\r\n\r\n            console.log('[LSP] Initializing feature handlers...');\r\n\r\n            // Settings manager\r\n            this.settingsManager = new SettingsManager(this.connection);\r\n\r\n            // Diagnostics handler\r\n            this.diagnosticsHandler = new DiagnosticsHandler(\r\n                this.connection,\r\n                this.documents,\r\n                this.projects,\r\n                this.settingsManager,\r\n                this.serverMetrics\r\n            );\r\n\r\n            // Completion handler (now receives syntax)\r\n            this.completionHandler = new CompletionHandler(\r\n                this.connection,\r\n                this.documents,\r\n                this.projects,\r\n                this.config.syntax\r\n            );\r\n\r\n            // Hover handler (now receives syntax)\r\n            this.hoverHandler = new HoverHandler(\r\n                this.connection,\r\n                this.documents,\r\n                this.projects,\r\n                this.config.syntax\r\n            );\r\n\r\n            // Metrics handler\r\n            this.metricsHandler = new MetricsHandler(\r\n                this.connection,\r\n                this.projects,\r\n                this.serverMetrics\r\n            );\r\n\r\n            console.log('[LSP] Feature handlers initialized');\r\n        }\r\n\r\n        public start(): void {\r\n            this.setupConnectionHandlers();\r\n            this.setupDocumentHandlers();\r\n\r\n            // Start listening\r\n            this.documents.listen(this.connection);\r\n            this.connection.listen();\r\n\r\n            console.log('[LSP] Server is now listening for requests');\r\n        }\r\n\r\n        private setupConnectionHandlers(): void {\r\n            // Initialize\r\n            this.connection.onInitialize((params: InitializeParams) => {\r\n                return this.handleInitialize(params);\r\n            });\r\n\r\n            this.connection.onInitialized(() => {\r\n                this.handleInitialized();\r\n            });\r\n\r\n            // Configuration\r\n            this.connection.onDidChangeConfiguration(change => {\r\n                this.settingsManager.handleConfigurationChange(change);\r\n                this.connection.languages.diagnostics.refresh();\r\n            });\r\n\r\n            // Watched files\r\n            this.connection.onDidChangeWatchedFiles(_change => {\r\n                console.log('[LSP] Watched file change detected');\r\n                this.connection.languages.diagnostics.refresh();\r\n            });\r\n\r\n            // Shutdown\r\n            this.connection.onShutdown(() => {\r\n                this.handleShutdown();\r\n            });\r\n\r\n            this.connection.onExit(() => {\r\n                console.log('[LSP] Server exiting');\r\n                process.exit(0);\r\n            });\r\n        }\r\n\r\n        private setupDocumentHandlers(): void {\r\n            // Document lifecycle\r\n            this.documents.onDidOpen(async e => {\r\n                console.log(`[LSP] Document opened: ${e.document.uri}`);\r\n                this.connection.languages.diagnostics.refresh();\r\n            });\r\n\r\n            this.documents.onDidClose(e => {\r\n                this.settingsManager.clearDocumentSettings(e.document.uri);\r\n                this.diagnosticsHandler.clearInflightValidation(e.document.uri);\r\n            });\r\n\r\n            this.documents.onDidChangeContent(async change => {\r\n                if (this.projects) {\r\n                    this.connection.languages.diagnostics.refresh();\r\n                }\r\n            });\r\n        }\r\n\r\n        private handleInitialize(params: InitializeParams): InitializeResult {\r\n            try {\r\n                console.log('[LSP] Handling initialization...');\r\n\r\n                const capabilities = params.capabilities;\r\n                this.hasConfigurationCapability = !!(capabilities.workspace?.configuration);\r\n                this.hasWorkspaceFolderCapability = !!(capabilities.workspace?.workspaceFolders);\r\n\r\n                // Update settings manager\r\n                this.settingsManager.setConfigurationCapability(this.hasConfigurationCapability);\r\n\r\n                // Get trigger characters from syntax LSP config\r\n                const triggerChars = this.config.syntax.lsp?.triggerCharacters || ['.', ':', '@', ' '];\r\n\r\n                const result: InitializeResult = {\r\n                    capabilities: {\r\n                        textDocumentSync: TextDocumentSyncKind.Incremental,\r\n                        completionProvider: {\r\n                            resolveProvider: true,\r\n                            triggerCharacters: triggerChars\r\n                        },\r\n                        diagnosticProvider: {\r\n                            interFileDependencies: false,\r\n                            workspaceDiagnostics: false\r\n                        },\r\n                        hoverProvider: true\r\n                    }\r\n                };\r\n\r\n                if (this.hasWorkspaceFolderCapability) {\r\n                    result.capabilities.workspace = {\r\n                        workspaceFolders: {\r\n                            supported: true\r\n                        }\r\n                    };\r\n                }\r\n\r\n                console.log('[LSP] Initialization complete');\r\n                return result;\r\n            } catch (e) {\r\n                console.error('[LSP] Error during initialization:', e);\r\n                throw e;\r\n            }\r\n        }\r\n\r\n        private handleInitialized(): void {\r\n            try {\r\n                if (this.hasConfigurationCapability) {\r\n                    this.connection.client.register(DidChangeConfigurationNotification.type, undefined);\r\n                }\r\n\r\n                if (this.hasWorkspaceFolderCapability) {\r\n                    this.connection.workspace.onDidChangeWorkspaceFolders(_event => {\r\n                        console.log('[LSP] Workspace folder change event received');\r\n                    });\r\n                }\r\n\r\n                const langName = this.config.syntax.config.name || 'Language';\r\n                this.connection.window.showInformationMessage(`${langName} Language Server initialized successfully!`);\r\n            } catch (e) {\r\n                console.error('[LSP] Error in onInitialized:', e);\r\n            }\r\n        }\r\n\r\n        private handleShutdown(): void {\r\n            try {\r\n                console.log('[LSP] Shutdown requested');\r\n\r\n                if (this.projects) {\r\n                    console.log('[LSP] Final metrics:', {\r\n                        server: this.serverMetrics,\r\n                        mainProject: this.projects.main.getMetrics(),\r\n                        anonymousProject: this.projects.anonymous.getMetrics()\r\n                    });\r\n\r\n                    this.projects.main.destroy();\r\n                    this.projects.anonymous.destroy();\r\n                }\r\n\r\n                console.log('[LSP] Cleanup complete');\r\n            } catch (e) {\r\n                console.error('[LSP] Shutdown error:', e);\r\n            }\r\n        }\r\n\r\n        public getProjects() {\r\n            return this.projects;\r\n        }\r\n\r\n        public getServerMetrics() {\r\n            return this.serverMetrics;\r\n        }\r\n\r\n        public getSyntax() {\r\n            return this.config.syntax;\r\n        }\r\n    }\r\n\r\n// ╚══════════════════════════════════════════════════════════════════════════════════════╝","// diagnostics.ts — Diagnostics validation and reporting\r\n//\r\n// Developed with ❤️ by Maysara.\r\n\r\n\r\n\r\n// ╔════════════════════════════════════════ PACK ════════════════════════════════════════╗\r\n\r\n\timport { Connection, TextDocuments, Diagnostic, DiagnosticSeverity, DocumentDiagnosticReportKind, type DocumentDiagnosticReport, }\r\n\t\t\t\t\t\t\t\tfrom 'vscode-languageserver';\r\n\timport { TextDocument } \tfrom 'vscode-languageserver-textdocument';\r\n\timport * as ProjectLib \t\tfrom '@je-es/project';\r\n\timport { Span } \t\t\tfrom '@je-es/parser';\r\n\timport { Diagnostic as KemetDiagnostic }\r\n\t\t\t\t\t\t\t\tfrom '@je-es/ast-analyzer';\r\n\timport { SettingsManager } \tfrom './settings';\r\n\timport { determineProject } from './common';\r\n\r\n// ╚══════════════════════════════════════════════════════════════════════════════════════╝\r\n\r\n\r\n\r\n// ╔════════════════════════════════════════ TYPE ════════════════════════════════════════╗\r\n\r\n\texport interface ServerMetrics {\r\n\t\ttotalValidations\t\t: number;\r\n\t\ttotalErrors\t\t\t\t: number;\r\n\t\taverageValidationTime\t: number;\r\n\t\tcacheHitRate\t\t\t: number;\r\n\t}\r\n\r\n// ╚══════════════════════════════════════════════════════════════════════════════════════╝\r\n\r\n\r\n\r\n// ╔════════════════════════════════════════ CORE ════════════════════════════════════════╗\r\n\r\n    export class DiagnosticsHandler {\r\n\r\n        // ┌──────────────────────────────── INIT ────────────────────────────────┐\r\n\r\n\t\t\tprivate connection\t\t\t: Connection;\r\n\t\t\tprivate documents\t\t\t: TextDocuments<TextDocument>;\r\n\t\t\tprivate projects\t\t\t: { main: ProjectLib.Project; anonymous: ProjectLib.Project };\r\n\t\t\tprivate settingsManager\t\t: SettingsManager;\r\n\t\t\tprivate serverMetrics\t\t: ServerMetrics;\r\n\t\t\tprivate inFlightValidations = new Map<string, Promise<Diagnostic[]>>();\r\n\r\n\t\t\tconstructor(\r\n\t\t\t\tconnection\t\t: Connection,\r\n\t\t\t\tdocuments\t\t: TextDocuments<TextDocument>,\r\n\t\t\t\tprojects\t\t: { main: ProjectLib.Project; anonymous: ProjectLib.Project },\r\n\t\t\t\tsettingsManager\t: SettingsManager,\r\n\t\t\t\tserverMetrics\t: ServerMetrics\r\n\t\t\t) {\r\n\t\t\t\tthis.connection \t\t= connection;\r\n\t\t\t\tthis.documents \t\t\t= documents;\r\n\t\t\t\tthis.projects \t\t\t= projects;\r\n\t\t\t\tthis.settingsManager \t= settingsManager;\r\n\t\t\t\tthis.serverMetrics \t\t= serverMetrics;\r\n\r\n\t\t\t\tthis.setupHandlers();\r\n\t\t\t}\r\n\r\n        // └──────────────────────────────────────────────────────────────────────┘\r\n\r\n\r\n        // ┌──────────────────────────────── MAIN ────────────────────────────────┐\r\n\r\n\t\t\tprivate async handleDiagnostics(params: any): Promise<DocumentDiagnosticReport> {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst document = this.documents.get(params.textDocument.uri);\r\n\t\t\t\t\tif (!document) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tkind: DocumentDiagnosticReportKind.Full,\r\n\t\t\t\t\t\t\titems: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet validationPromise = this.inFlightValidations.get(document.uri);\r\n\r\n\t\t\t\t\tif (!validationPromise) {\r\n\t\t\t\t\t\tvalidationPromise = this.validateDocument(document);\r\n\t\t\t\t\t\tthis.inFlightValidations.set(document.uri, validationPromise);\r\n\r\n\t\t\t\t\t\tvalidationPromise.finally(() => {\r\n\t\t\t\t\t\t\tthis.inFlightValidations.delete(document.uri);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst diagnostics = await validationPromise;\r\n\r\n\t\t\t\t\tconsole.log(`[DIAGNOSTICS] Returning ${diagnostics.length} diagnostics for ${document.uri}`);\r\n\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tkind: DocumentDiagnosticReportKind.Full,\r\n\t\t\t\t\t\titems: diagnostics\r\n\t\t\t\t\t};\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tconsole.error('[DIAGNOSTICS] Error:', e);\r\n\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tkind: DocumentDiagnosticReportKind.Full,\r\n\t\t\t\t\t\titems: [{\r\n\t\t\t\t\t\t\tseverity: DiagnosticSeverity.Error,\r\n\t\t\t\t\t\t\trange: {\r\n\t\t\t\t\t\t\t\tstart: { line: 0, character: 0 },\r\n\t\t\t\t\t\t\t\tend: { line: 0, character: 0 }\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tmessage: `LSP internal error: ${e instanceof Error ? e.message : 'Unknown error'}`,\r\n\t\t\t\t\t\t\tsource: 'kemet-lsp'\r\n\t\t\t\t\t\t}]\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tprivate async validateDocument(document: TextDocument): Promise<Diagnostic[]> {\r\n\t\t\t\tconst startTime = Date.now();\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst diagnostics: Diagnostic[] = [];\r\n\t\t\t\t\tconst text = document.getText();\r\n\t\t\t\t\tconst uri = document.uri;\r\n\r\n\t\t\t\t\tconsole.log(`[DIAGNOSTICS] Starting validation for: ${uri}`);\r\n\r\n\t\t\t\t\tconst settings = await this.settingsManager.getDocumentSettings(uri);\r\n\r\n\t\t\t\t\t// Determine which project to use\r\n\t\t\t\t\tconst { project, modulePath } = determineProject(uri, this.projects);\r\n\r\n\t\t\t\t\t// Lint the document\r\n\t\t\t\t\tconst result = await project.lintAsync(text, modulePath);\r\n\r\n\t\t\t\t\tconsole.log(`[DIAGNOSTICS] Lint result: has_error=${result.has_error}, has_warning=${result.has_warning}`);\r\n\r\n\t\t\t\t\t// Collect all diagnostics\r\n\t\t\t\t\tconst allErrors = result.diagnosticManager.getAllErrors();\r\n\t\t\t\t\tconst allWarnings = result.diagnosticManager.getAllWarnings();\r\n\t\t\t\t\tconst allInfos = result.diagnosticManager.getAllInfos();\r\n\r\n\t\t\t\t\tconsole.log(`[DIAGNOSTICS] DiagnosticManager stats:`);\r\n\t\t\t\t\tconsole.log(`  - Errors: ${allErrors.length}`);\r\n\t\t\t\t\tconsole.log(`  - Warnings: ${allWarnings.length}`);\r\n\t\t\t\t\tconsole.log(`  - Infos: ${allInfos.length}`);\r\n\r\n\t\t\t\t\tconst allKemetDiags = [...allErrors, ...allWarnings, ...allInfos];\r\n\r\n\t\t\t\t\t// Convert Kemet diagnostics to LSP diagnostics\r\n\t\t\t\t\tfor (const kemetDiag of allKemetDiags) {\r\n\t\t\t\t\t\tconst diagnostic = this.convertKemetDiagnostic(kemetDiag, document, settings);\r\n\t\t\t\t\t\tif (diagnostic) {\r\n\t\t\t\t\t\t\tdiagnostics.push(diagnostic);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Truncate if needed\r\n\t\t\t\t\tconst maxDiagnostics = settings.maxDiagnostics || 100;\r\n\t\t\t\t\tif (diagnostics.length > maxDiagnostics) {\r\n\t\t\t\t\t\tconst truncated = diagnostics.slice(0, maxDiagnostics);\r\n\t\t\t\t\t\ttruncated.push({\r\n\t\t\t\t\t\t\tseverity: DiagnosticSeverity.Warning,\r\n\t\t\t\t\t\t\trange: {\r\n\t\t\t\t\t\t\t\tstart: { line: 0, character: 0 },\r\n\t\t\t\t\t\t\t\tend: { line: 0, character: 0 }\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tmessage: `Too many diagnostics. Showing first ${maxDiagnostics} of ${diagnostics.length}.`,\r\n\t\t\t\t\t\t\tsource: 'kemet-lsp'\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tthis.updateMetrics(startTime, allErrors.length);\r\n\t\t\t\t\t\treturn truncated;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.updateMetrics(startTime, allErrors.length);\r\n\r\n\t\t\t\t\tconst duration = Date.now() - startTime;\r\n\t\t\t\t\tconsole.log(`[DIAGNOSTICS] Returning ${diagnostics.length} diagnostics in ${duration}ms`);\r\n\t\t\t\t\treturn diagnostics;\r\n\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tconsole.error('[DIAGNOSTICS] Unexpected error:', e);\r\n\t\t\t\t\tif (e instanceof Error) {\r\n\t\t\t\t\t\tconsole.error('[DIAGNOSTICS] Stack:', e.stack);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.serverMetrics.totalValidations++;\r\n\r\n\t\t\t\t\treturn [{\r\n\t\t\t\t\t\tseverity: DiagnosticSeverity.Error,\r\n\t\t\t\t\t\trange: {\r\n\t\t\t\t\t\t\tstart: { line: 0, character: 0 },\r\n\t\t\t\t\t\t\tend: { line: 0, character: 0 }\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tmessage: `LSP internal error: ${e instanceof Error ? e.message : 'Unknown error'}. Please check the output console.`,\r\n\t\t\t\t\t\tsource: 'kemet-lsp'\r\n\t\t\t\t\t}];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n        // └──────────────────────────────────────────────────────────────────────┘\r\n\r\n\r\n        // ┌──────────────────────────────── ---- ────────────────────────────────┐\r\n\r\n\t\t\tprivate convertKemetDiagnostic(\r\n\t\t\t\tkemetDiag: KemetDiagnostic,\r\n\t\t\t\tdocument: TextDocument,\r\n\t\t\t\tsettings: any\r\n\t\t\t): Diagnostic | null {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst span: Span = kemetDiag.targetSpan ?? kemetDiag.contextSpan ?? { start: 0, end: 0 };\r\n\r\n\t\t\t\t\tlet severity: DiagnosticSeverity;\r\n\t\t\t\t\tif (kemetDiag.kind === 'error') {\r\n\t\t\t\t\t\tseverity = DiagnosticSeverity.Error;\r\n\t\t\t\t\t} else if (kemetDiag.kind === 'warning') {\r\n\t\t\t\t\t\tif (settings.showWarnings === false) return null;\r\n\t\t\t\t\t\tseverity = DiagnosticSeverity.Warning;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (settings.showInfos === false) return null;\r\n\t\t\t\t\t\tseverity = DiagnosticSeverity.Information;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tseverity,\r\n\t\t\t\t\t\trange: {\r\n\t\t\t\t\t\t\tstart: document.positionAt(span.start),\r\n\t\t\t\t\t\t\tend: document.positionAt(span.end),\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tmessage: kemetDiag.msg,\r\n\t\t\t\t\t\tsource: 'kemet-lsp',\r\n\t\t\t\t\t\tcode: kemetDiag.code\r\n\t\t\t\t\t};\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tconsole.warn('[DIAGNOSTICS] Error converting diagnostic:', e);\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n        // └──────────────────────────────────────────────────────────────────────┘\r\n\r\n\r\n        // ┌──────────────────────────────── HELP ────────────────────────────────┐\r\n\r\n\t\t\tprivate setupHandlers(): void {\r\n\t\t\t\tthis.connection.languages.diagnostics.on(async (params) => {\r\n\t\t\t\t\treturn this.handleDiagnostics(params);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tprivate updateMetrics(startTime: number, errorCount: number): void {\r\n\t\t\t\tthis.serverMetrics.totalValidations++;\r\n\t\t\t\tthis.serverMetrics.totalErrors += errorCount;\r\n\t\t\t\tconst duration = Date.now() - startTime;\r\n\t\t\t\tthis.serverMetrics.averageValidationTime =\r\n\t\t\t\t\t(this.serverMetrics.averageValidationTime * (this.serverMetrics.totalValidations - 1) + duration) /\r\n\t\t\t\t\tthis.serverMetrics.totalValidations;\r\n\t\t\t}\r\n\r\n\t\t\tclearInflightValidation(uri: string): void {\r\n\t\t\t\tthis.inFlightValidations.delete(uri);\r\n\t\t\t}\r\n\r\n        // └──────────────────────────────────────────────────────────────────────┘\r\n\r\n    }\r\n\r\n// ╚══════════════════════════════════════════════════════════════════════════════════════╝","// common.ts — Shared utilities and helper functions\r\n//\r\n// Developed with ❤️ by Maysara.\r\n\r\n\r\n\r\n// ╔════════════════════════════════════════ PACK ════════════════════════════════════════╗\r\n\r\n\timport { TextDocument } \t\tfrom 'vscode-languageserver-textdocument';\r\n\timport { CompletionItemKind } \tfrom 'vscode-languageserver';\r\n\timport * as ProjectLib \t\t\tfrom '@je-es/project';\r\n\timport { Span } \t\t\t\tfrom '@je-es/parser';\r\n\timport { fileURLToPath }\t\tfrom 'url';\r\n\timport * as Path \t\t\t\tfrom 'path';\r\n\timport { SYMBOL_KIND_TO_COMPLETION_KIND } from './constants';\r\n\r\n// ╚══════════════════════════════════════════════════════════════════════════════════════╝\r\n\r\n\r\n\r\n// ╔════════════════════════════════════════ TYPE ════════════════════════════════════════╗\r\n\r\n\texport interface ProjectContext {\r\n\t\tproject\t\t\t\t: ProjectLib.Project;\r\n\t\tmodulePath?\t\t\t: string;\r\n\t\tcurrentModuleName\t: string;\r\n\t}\r\n\r\n\texport interface WordInfo {\r\n\t\tword\t\t\t\t: string;\r\n\t\tspan\t\t\t\t: Span;\r\n\t}\r\n\r\n// ╚══════════════════════════════════════════════════════════════════════════════════════╝\r\n\r\n\r\n\r\n// ╔════════════════════════════════════════ CORE ════════════════════════════════════════╗\r\n\r\n\t/**\r\n\t * Determine which project to use based on the document URI.\r\n\t * Returns main project if the file is within the project, otherwise anonymous project.\r\n\t */\r\n\texport function determineProject(\r\n\t\turi\t\t\t: string,\r\n\t\tprojects\t: { main: ProjectLib.Project; anonymous: ProjectLib.Project }\r\n\t): ProjectContext {\r\n\t\tif (uri.startsWith('file://')) {\r\n\t\t\ttry {\r\n\t\t\t\tconst filePath \t\t= fileURLToPath(uri);\r\n\t\t\t\tconst relative \t\t= Path.relative(projects.main.rootPath, filePath);\r\n\t\t\t\tconst isInProject \t= !relative.startsWith('..') && !Path.isAbsolute(relative);\r\n\r\n\t\t\t\tif (isInProject && filePath.endsWith('.k')) {\r\n\t\t\t\t\tconst moduleName = Path.basename(filePath, '.k');\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tproject\t\t\t\t: projects.main,\r\n\t\t\t\t\t\tmodulePath\t\t\t: filePath,\r\n\t\t\t\t\t\tcurrentModuleName\t: moduleName\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.warn('[COMMON] Error determining project:', e);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tproject\t\t\t\t: projects.anonymous,\r\n\t\t\tcurrentModuleName\t: 'main'\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Access the scope manager from a project's analyzer.\r\n\t * Tries multiple access patterns for compatibility.\r\n\t */\r\n\texport function getScopeManager(project: ProjectLib.Project): any {\r\n\t\t// Try multiple ways to access the analyzer\r\n\t\tif (project.analyzer) {\r\n\t\t\treturn project.analyzer.config?.services?.scopeManager;\r\n\t\t}\r\n\r\n\t\tconst analyzer = (project as any)._analyzer || (project as any).analyzer;\r\n\t\tif (analyzer) {\r\n\t\t\treturn analyzer.config?.services?.scopeManager;\r\n\t\t}\r\n\r\n\t\tif (typeof (project as any).getScopeManager === 'function') {\r\n\t\t\treturn (project as any).getScopeManager();\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * Format a type for display in completions/hover.\r\n\t */\r\n\texport function formatType(type: any): string {\r\n\t\tif (!type || !type.kind) return 'unknown';\r\n\r\n\t\tswitch (type.kind) {\r\n\t\t\tcase 'i8'\t: case 'i16': case 'i32': case 'i64':\r\n\t\t\tcase 'u8'\t: case 'u16': case 'u32': case 'u64':\r\n\t\t\tcase 'f32'\t: case 'f64':\r\n\t\t\tcase 'bool'\t: case 'void': case 'str':\r\n\t\t\t\treturn type.kind;\r\n\t\t\tcase 'pointer':\r\n\t\t\t\treturn `*${formatType(type.getPointer()?.target)}`;\r\n\t\t\tcase 'array':\r\n\t\t\t\treturn `[]${formatType(type.getArray()?.target)}`;\r\n\t\t\tcase 'optional':\r\n\t\t\t\treturn `?${formatType(type.getOptional()?.target)}`;\r\n\t\t\tcase 'function':\r\n\t\t\t\treturn 'fn';\r\n\t\t\tcase 'struct':\r\n\t\t\t\treturn 'struct';\r\n\t\t\tcase 'enum':\r\n\t\t\t\treturn 'enum';\r\n\t\t\tdefault:\r\n\t\t\t\treturn type.kind;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Convert a symbol kind to LSP CompletionItemKind.\r\n\t */\r\n\texport function getCompletionItemKind(symbolKind: string): CompletionItemKind {\r\n\t\treturn SYMBOL_KIND_TO_COMPLETION_KIND[symbolKind] || CompletionItemKind.Text;\r\n\t}\r\n\r\n\t/**\r\n\t * Get word and span at a specific position in a document.\r\n\t */\r\n\texport function getWordAndSpanAtPosition(\r\n\t\tdocument: TextDocument,\r\n\t\tposition: { line: number; character: number }\r\n\t): WordInfo | null {\r\n\t\tconst text   = document.getText();\r\n\t\tconst offset = document.offsetAt(position);\r\n\r\n\t\t// Find word boundaries\r\n\t\tlet start = offset;\r\n\t\tlet end   = offset;\r\n\r\n\t\t// Go backwards to find start\r\n\t\twhile (start > 0 && /[a-zA-Z0-9_@]/.test(text[start - 1])) {\r\n\t\t\tstart--;\r\n\t\t}\r\n\r\n\t\t// Go forwards to find end\r\n\t\twhile (end < text.length && /[a-zA-Z0-9_@]/.test(text[end])) {\r\n\t\t\tend++;\r\n\t\t}\r\n\r\n\t\tif (start === end) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst word = text.substring(start, end);\r\n\t\tconst span = { start, end };\r\n\r\n\t\treturn { word, span };\r\n\t}\r\n\r\n\t/**\r\n\t * Get detailed symbol information for display.\r\n\t */\r\n\texport function getSymbolDetail(symbol: any): string {\r\n\t\tif (symbol.type) {\r\n\t\t\treturn `${symbol.kind}: ${formatType(symbol.type)}`;\r\n\t\t}\r\n\t\treturn symbol.kind;\r\n\t}\r\n\r\n\t/**\r\n\t * Get symbol documentation string.\r\n\t */\r\n\texport function getSymbolDocumentation(symbol: any): string {\r\n\t\tconst parts: string[] = [];\r\n\r\n\t\tif (symbol.visibility?.kind === 'Public') parts.push('public');\r\n\t\tif (symbol.mutability?.kind === 'Mutable') parts.push('mut');\r\n\t\tif (symbol.metadata?.callable) parts.push('callable');\r\n\t\tif (symbol.isExported) parts.push('exported');\r\n\r\n\t\treturn parts.join(', ');\r\n\t}\r\n\r\n\t/**\r\n\t * Check if a symbol should be included in completions based on visibility and context.\r\n\t */\r\n\texport function shouldIncludeSymbol( symbol: any, currentModuleName: string, modulePath?: string ): boolean {\r\n\t\t// Skip synthetic symbols\r\n\t\tif (symbol.metadata?.isSynthetic) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tconst symbolModule = symbol.module || '';\r\n\t\tconst isFromCurrentModule =\r\n\t\t\tsymbolModule === modulePath ||\r\n\t\t\tsymbolModule === currentModuleName ||\r\n\t\t\tsymbolModule === '';\r\n\r\n\t\tconst isImport = symbol.kind === 'Use';\r\n\t\tconst isBuiltin = symbol.metadata?.isBuiltin === true;\r\n\t\tconst isPublicExported = symbol.isExported && symbol.visibility?.kind === 'Public';\r\n\r\n\t\treturn isFromCurrentModule || isImport || isBuiltin || isPublicExported;\r\n\t}\r\n\r\n\t/**\r\n\t * Get keyword detail and documentation for completion resolve.\r\n\t */\r\n\texport function getKeywordCompletionInfo(keyword: string, doc: any): { detail: string; documentation: string } {\r\n\t\treturn {\r\n\t\t\tdetail: doc.signature,\r\n\t\t\tdocumentation: `${doc.description}${doc.example ? '\\n\\nExample:\\n' + doc.example : ''}`\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Format symbol for hover display with full signature and metadata.\r\n\t */\r\n\texport function formatSymbolForHover(symbol: any): string[] {\r\n\t\tconst parts: string[] = [];\r\n\r\n\t\t// Header\r\n\t\tconst kindName = symbol.kind.toLowerCase();\r\n\t\tparts.push(`**${symbol.name}** (${kindName})`);\r\n\t\tparts.push('');\r\n\r\n\t\t// Signature/Type\r\n\t\tif (symbol.kind === 'Function') {\r\n\t\t\tparts.push('```kemet');\r\n\t\t\tconst visibility \t= symbol.visibility?.kind === 'Public' ? 'pub ' : '';\r\n\t\t\tconst metadata \t\t= symbol.metadata || {};\r\n\t\t\tconst params \t\t= metadata.params || [];\r\n\t\t\tconst returnType \t= metadata.returnType ? formatType(metadata.returnType) : 'void';\r\n\t\t\tconst errorType \t= metadata.errorType ? formatType(metadata.errorType) : null;\r\n\r\n\t\t\tconst paramStrs \t= params.map((p: any) => {\r\n\t\t\t\tconst mut = p.mutability?.kind === 'Mutable' ? 'mut ' : '';\r\n\t\t\t\treturn `${mut}${p.name}: ${p.type ? formatType(p.type) : 'unknown'}`;\r\n\t\t\t});\r\n\r\n\t\t\tconst errorPart \t= errorType ? `${errorType}!` : '';\r\n\t\t\tparts.push(`${visibility}fn ${symbol.name}(${paramStrs.join(', ')}) -> ${errorPart}${returnType}`);\r\n\t\t\tparts.push('```');\r\n\t\t} else if (symbol.kind === 'Variable' || symbol.kind === 'Parameter') {\r\n\t\t\tparts.push('```kemet');\r\n\t\t\tconst visibility = symbol.visibility?.kind === 'Public' ? 'pub ' : '';\r\n\t\t\tconst mutability = symbol.mutability?.kind === 'Mutable' ? 'mut ' : '';\r\n\t\t\tconst typeStr = symbol.type ? formatType(symbol.type) : 'unknown';\r\n\t\t\tparts.push(`${visibility}let ${mutability}${symbol.name}: ${typeStr}`);\r\n\t\t\tparts.push('```');\r\n\t\t}\r\n\r\n\t\t// Additional info\r\n\t\tconst info: string[] = [];\r\n\t\tif (symbol.visibility?.kind === 'Public') info.push('**public**');\r\n\t\tif (symbol.mutability?.kind === 'Mutable') info.push('**mutable**');\r\n\t\tif (symbol.isExported) info.push('**exported**');\r\n\t\tif (symbol.metadata?.isBuiltin) info.push('**built-in**');\r\n\r\n\t\tif (info.length > 0) {\r\n\t\t\tparts.push('');\r\n\t\t\tparts.push(info.join(' • '));\r\n\t\t}\r\n\r\n\t\t// Module info\r\n\t\tif (symbol.module) {\r\n\t\t\tparts.push('');\r\n\t\t\tparts.push(`Module: \\`${symbol.module}\\``);\r\n\t\t}\r\n\r\n\t\treturn parts;\r\n\t}\r\n\r\n// ╚══════════════════════════════════════════════════════════════════════════════════════╝","// constants.ts — Shared constants for the language server\r\n//                Re-exports from syntax configuration\r\n//\r\n// Developed with ❤️ by Maysara.\r\n\r\n\r\n\r\n// ╔════════════════════════════════════════ PACK ════════════════════════════════════════╗\r\n\r\n\timport { CompletionItemKind } from 'vscode-languageserver';\r\n\r\n// ╚══════════════════════════════════════════════════════════════════════════════════════╝\r\n\r\n\r\n\r\n// ╔════════════════════════════════════════ TYPE ════════════════════════════════════════╗\r\n\r\n\t// Re-export types from syntax\r\n\texport type { KeywordDoc, LSPKeywords, LSPConfig } from '@je-es/syntax';\r\n\r\n// ╚══════════════════════════════════════════════════════════════════════════════════════╝\r\n\r\n\r\n\r\n// ╔════════════════════════════════════════ INIT ════════════════════════════════════════╗\r\n\r\n\t/**\r\n\t * Get LSP configuration from a syntax object.\r\n\t * This allows the LSP to use language-specific configuration.\r\n\t */\r\n\texport function getKeywordsFromSyntax(syntax: any): any {\r\n\t\treturn syntax.lsp?.keywords;\r\n\t}\r\n\r\n\texport function getKeywordDocsFromSyntax(syntax: any): any {\r\n\t\treturn syntax.lsp?.keywordDocs;\r\n\t}\r\n\r\n\texport function getBuiltinDocsFromSyntax(syntax: any): any {\r\n\t\treturn syntax.lsp?.builtinDocs;\r\n\t}\r\n\r\n\t/**\r\n\t * Symbol kind to LSP CompletionItemKind mapping.\r\n\t */\r\n\texport const SYMBOL_KIND_TO_COMPLETION_KIND: { [key: string]: CompletionItemKind } = {\r\n\t\t'Function'\t\t: CompletionItemKind.Function,\r\n\t\t'Variable'\t\t: CompletionItemKind.Variable,\r\n\t\t'Parameter'\t\t: CompletionItemKind.Variable,\r\n\t\t'Definition'\t: CompletionItemKind.Class,\r\n\t\t'StructField'\t: CompletionItemKind.Field,\r\n\t\t'EnumVariant'\t: CompletionItemKind.EnumMember,\r\n\t\t'Use'\t\t\t: CompletionItemKind.Module\r\n\t};\r\n\r\n// ╚══════════════════════════════════════════════════════════════════════════════════════╝","// completion.ts — Smart autocomplete with scope-aware suggestions\r\n//\r\n// Developed with ❤️ by Maysara.\r\n\r\n\r\n\r\n// ╔════════════════════════════════════════ PACK ════════════════════════════════════════╗\r\n\r\n\timport { Connection, TextDocuments, CompletionItem, CompletionItemKind, TextDocumentPositionParams }\r\n\t\t\t\t\t\t\t\tfrom 'vscode-languageserver';\r\n\timport { determineProject, getCompletionItemKind, getScopeManager, getSymbolDetail, getSymbolDocumentation }\r\n\t\t\t\t\t\t\t\tfrom './common';\r\n\timport { TextDocument } \tfrom 'vscode-languageserver-textdocument';\r\n\timport * as ProjectLib \t\tfrom '@je-es/project';\r\n\timport type { Syntax } \t\tfrom '@je-es/syntax';\r\n\r\n// ╚══════════════════════════════════════════════════════════════════════════════════════╝\r\n\r\n\r\n\r\n// ╔════════════════════════════════════════ TYPE ════════════════════════════════════════╗\r\n\r\n\texport interface CompletionContext {\r\n\t\tisInFunction\t: boolean;\r\n\t\tisInStruct\t\t: boolean;\r\n\t\tisInEnum\t\t: boolean;\r\n\t\tisAfterDot\t\t: boolean;\r\n\t\tisAfterUse\t\t: boolean;\r\n\t\tisAfterLet\t\t: boolean;\r\n\t\tisAfterFn\t\t: boolean;\r\n\t\tisAfterDef\t\t: boolean;\r\n\t\tpreviousToken\t: string;\r\n\t\tcurrentScope\t: string;\r\n\t}\r\n\r\n// ╚══════════════════════════════════════════════════════════════════════════════════════╝\r\n\r\n\r\n\r\n// ╔════════════════════════════════════════ CORE ════════════════════════════════════════╗\r\n\r\n    export class CompletionHandler {\r\n\r\n        // ┌──────────────────────────────── INIT ────────────────────────────────┐\r\n\r\n\t\t\tprivate connection\t: Connection;\r\n\t\t\tprivate projects\t: { main: ProjectLib.Project; anonymous: ProjectLib.Project };\r\n\t\t\tprivate documents\t: TextDocuments<TextDocument>;\r\n\t\t\tprivate syntax\t\t: Syntax;\r\n\r\n\t\t\tconstructor(\r\n\t\t\t\tconnection\t: Connection,\r\n\t\t\t\tdocuments\t: TextDocuments<TextDocument>,\r\n\t\t\t\tprojects: { main: ProjectLib.Project; anonymous: ProjectLib.Project },\r\n\t\t\t\tsyntax: Syntax\r\n\t\t\t) {\r\n\t\t\t\tthis.connection = connection;\r\n\t\t\t\tthis.documents = documents;\r\n\t\t\t\tthis.projects = projects;\r\n\t\t\t\tthis.syntax = syntax;\r\n\r\n\t\t\t\tthis.setupHandlers();\r\n\t\t\t}\r\n\r\n        // └──────────────────────────────────────────────────────────────────────┘\r\n\r\n\r\n        // ┌──────────────────────────────── MAIN ────────────────────────────────┐\r\n\r\n\t\t\tprivate handleCompletion(params: TextDocumentPositionParams): CompletionItem[] {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconsole.log('[COMPLETION] Request received at position:', params.position);\r\n\r\n\t\t\t\t\tconst document = this.documents.get(params.textDocument.uri);\r\n\t\t\t\t\tif (!document) {\r\n\t\t\t\t\t\tconsole.warn('[COMPLETION] Document not found');\r\n\t\t\t\t\t\treturn [];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst context = this.analyzeCompletionContext(document, params);\r\n\t\t\t\t\tconsole.log('[COMPLETION] Context:', JSON.stringify(context, null, 2));\r\n\r\n\t\t\t\t\tconst items: CompletionItem[] = [];\r\n\r\n\t\t\t\t\t// Don't suggest anything after dot (member access - needs more context)\r\n\t\t\t\t\tif (!context.isAfterDot) {\r\n\t\t\t\t\t\t// Add keywords based on context\r\n\t\t\t\t\t\titems.push(...this.getKeywordCompletions(context));\r\n\r\n\t\t\t\t\t\t// Add builtins\r\n\t\t\t\t\t\titems.push(...this.getBuiltinCompletions());\r\n\r\n\t\t\t\t\t\t// Add symbols from scope manager\r\n\t\t\t\t\t\titems.push(...this.getScopeSymbolCompletions(document, params));\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconsole.log(`[COMPLETION] Returning ${items.length} total items`);\r\n\t\t\t\t\treturn items;\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tconsole.error('[COMPLETION] Error:', e);\r\n\t\t\t\t\tif (e instanceof Error) {\r\n\t\t\t\t\t\tconsole.error('[COMPLETION] Stack:', e.stack);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tprivate handleCompletionResolve(item: CompletionItem): CompletionItem {\r\n\t\t\t\ttry {\r\n\t\t\t\t\t// Add detailed documentation for keywords\r\n\t\t\t\t\tif (item.data && typeof item.data === 'string' && item.data.startsWith('keyword_')) {\r\n\t\t\t\t\t\tconst keyword = item.label;\r\n\t\t\t\t\t\tconst doc = this.syntax.getKeywordDoc(keyword);\r\n\t\t\t\t\t\tif (doc) {\r\n\t\t\t\t\t\t\titem.detail = doc.signature;\r\n\t\t\t\t\t\t\titem.documentation = `${doc.description}${doc.example ? '\\n\\nExample:\\n' + doc.example : ''}`;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn item;\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tconsole.error('[COMPLETION] CompletionResolve error:', e);\r\n\t\t\t\t\treturn item;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tprivate analyzeCompletionContext(\r\n\t\t\t\tdocument: TextDocument,\r\n\t\t\t\tposition: TextDocumentPositionParams\r\n\t\t\t): CompletionContext {\r\n\t\t\t\tconst text = document.getText();\r\n\t\t\t\tconst offset = document.offsetAt(position.position);\r\n\t\t\t\tconst lineText = text.substring(\r\n\t\t\t\t\tdocument.offsetAt({ line: position.position.line, character: 0 }),\r\n\t\t\t\t\toffset\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// Extract previous tokens\r\n\t\t\t\tconst tokens = lineText.trim().split(/\\s+/);\r\n\t\t\t\tconst previousToken = tokens.length > 1 ? tokens[tokens.length - 2] : '';\r\n\t\t\t\tconst currentToken = tokens[tokens.length - 1] || '';\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tisInFunction: /\\bfn\\b/.test(text.substring(0, offset)),\r\n\t\t\t\t\tisInStruct: /\\bstruct\\s*\\{/.test(text.substring(0, offset)),\r\n\t\t\t\t\tisInEnum: /\\benum\\s*\\{/.test(text.substring(0, offset)),\r\n\t\t\t\t\tisAfterDot: currentToken.endsWith('.') || previousToken === '.',\r\n\t\t\t\t\tisAfterUse: previousToken === 'use',\r\n\t\t\t\t\tisAfterLet: previousToken === 'let',\r\n\t\t\t\t\tisAfterFn: previousToken === 'fn',\r\n\t\t\t\t\tisAfterDef: previousToken === 'def',\r\n\t\t\t\t\tpreviousToken,\r\n\t\t\t\t\tcurrentScope: 'global'\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n        // └──────────────────────────────────────────────────────────────────────┘\r\n\r\n\r\n        // ┌──────────────────────────────── ---- ────────────────────────────────┐\r\n\r\n\t\t\tprivate getKeywordCompletions(context: CompletionContext): CompletionItem[] {\r\n\t\t\t\tconst items: CompletionItem[] = [];\r\n\t\t\t\tconst keywords = this.syntax.getLSPKeywords();\r\n\t\t\t\t\r\n\t\t\t\tif (!keywords) {\r\n\t\t\t\t\tconsole.warn('[COMPLETION] No LSP keywords available in syntax');\r\n\t\t\t\t\treturn items;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet selectedKeywords: string[] = [];\r\n\r\n\t\t\t\t// Context-aware keyword suggestions\r\n\t\t\t\tif (context.isAfterLet) {\r\n\t\t\t\t\tselectedKeywords = ['mut', ...keywords.types];\r\n\t\t\t\t} else if (context.isAfterFn || context.isAfterDef) {\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t} else if (context.isAfterUse) {\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t} else if (context.isInFunction) {\r\n\t\t\t\t\tselectedKeywords = [\r\n\t\t\t\t\t\t...keywords.controlFlow,\r\n\t\t\t\t\t\t...keywords.declarations.filter(k => k !== 'pub'),\r\n\t\t\t\t\t\t...keywords.operators,\r\n\t\t\t\t\t\t...keywords.literals\r\n\t\t\t\t\t];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tselectedKeywords = [\r\n\t\t\t\t\t\t...keywords.declarations,\r\n\t\t\t\t\t\t...keywords.types,\r\n\t\t\t\t\t\t...keywords.controlFlow,\r\n\t\t\t\t\t\t...keywords.modifiers,\r\n\t\t\t\t\t\t...keywords.operators,\r\n\t\t\t\t\t\t...keywords.literals\r\n\t\t\t\t\t];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselectedKeywords.forEach((keyword, index) => {\r\n\t\t\t\t\tconst item: CompletionItem = {\r\n\t\t\t\t\t\tlabel: keyword,\r\n\t\t\t\t\t\tkind: keywords.types.includes(keyword)\r\n\t\t\t\t\t\t\t? CompletionItemKind.TypeParameter\r\n\t\t\t\t\t\t\t: keywords.controlFlow.includes(keyword)\r\n\t\t\t\t\t\t\t? CompletionItemKind.Keyword\r\n\t\t\t\t\t\t\t: CompletionItemKind.Keyword,\r\n\t\t\t\t\t\tdata: `keyword_${index}`,\r\n\t\t\t\t\t\tsortText: `0_${keyword}`\r\n\t\t\t\t\t};\r\n\t\t\t\t\titems.push(item);\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn items;\r\n\t\t\t}\r\n\r\n\t\t\tprivate getBuiltinCompletions(): CompletionItem[] {\r\n\t\t\t\tconst keywords = this.syntax.getLSPKeywords();\r\n\t\t\t\tif (!keywords) return [];\r\n\r\n\t\t\t\treturn keywords.builtins.map((builtin, index) => ({\r\n\t\t\t\t\tlabel: builtin,\r\n\t\t\t\t\tkind: builtin === 'self' ? CompletionItemKind.Variable : CompletionItemKind.Function,\r\n\t\t\t\t\tdata: `builtin_${index}`,\r\n\t\t\t\t\tdetail: builtin === '@print' ? 'fn(str) -> void' : undefined,\r\n\t\t\t\t\tsortText: `1_${builtin}`\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\r\n\t\t\tprivate getScopeSymbolCompletions(\r\n\t\t\t\tdocument: TextDocument,\r\n\t\t\t\tposition: TextDocumentPositionParams\r\n\t\t\t): CompletionItem[] {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst uri  = position.textDocument.uri;\r\n\t\t\t\t\tconst text = document.getText();\r\n\r\n\t\t\t\t\t// Determine which project to use\r\n\t\t\t\t\tconst { project, modulePath, currentModuleName } = determineProject(uri, this.projects);\r\n\r\n\t\t\t\t\t// Run fresh lint with current content\r\n\t\t\t\t\tconsole.log('[COMPLETION] Running lint for autocomplete...');\r\n\t\t\t\t\tconst startLint = Date.now();\r\n\t\t\t\t\tconst result = project.lint(text, modulePath);\r\n\t\t\t\t\tconsole.log(`[COMPLETION] Lint completed in ${Date.now() - startLint}ms`);\r\n\r\n\t\t\t\t\t// Access scope manager\r\n\t\t\t\t\tconst scopeManager = getScopeManager(project);\r\n\t\t\t\t\tif (!scopeManager) {\r\n\t\t\t\t\t\tconsole.error('[COMPLETION] Could not access scope manager');\r\n\t\t\t\t\t\treturn [];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst allSymbols = scopeManager.getAllSymbols();\r\n\t\t\t\t\tconsole.log(`[COMPLETION] Found ${allSymbols.length} total symbols`);\r\n\r\n\t\t\t\t\tconst items: CompletionItem[] = [];\r\n\t\t\t\t\tconst seenSymbols = new Set<string>();\r\n\r\n\t\t\t\t\tfor (const symbol of allSymbols) {\r\n\t\t\t\t\t\t// Skip duplicates and synthetic symbols\r\n\t\t\t\t\t\tif (seenSymbols.has(symbol.name) || symbol.metadata?.isSynthetic) {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Filter symbols appropriately\r\n\t\t\t\t\t\tconst symbolModule = symbol.module || '';\r\n\t\t\t\t\t\tconst isFromCurrentModule =\r\n\t\t\t\t\t\t\tsymbolModule === modulePath ||\r\n\t\t\t\t\t\t\tsymbolModule === currentModuleName ||\r\n\t\t\t\t\t\t\tsymbolModule === '';\r\n\r\n\t\t\t\t\t\tconst isImport = symbol.kind === 'Use';\r\n\t\t\t\t\t\tconst isBuiltin = symbol.metadata?.isBuiltin === true;\r\n\t\t\t\t\t\tconst isPublicExported = symbol.isExported && symbol.visibility.kind === 'Public';\r\n\r\n\t\t\t\t\t\tif (!isFromCurrentModule && !isImport && !isBuiltin && !isPublicExported) {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tseenSymbols.add(symbol.name);\r\n\r\n\t\t\t\t\t\tconst item: CompletionItem = {\r\n\t\t\t\t\t\t\tlabel: symbol.name,\r\n\t\t\t\t\t\t\tkind: getCompletionItemKind(symbol.kind),\r\n\t\t\t\t\t\t\tdata: `symbol_${symbol.id}`,\r\n\t\t\t\t\t\t\tdetail: getSymbolDetail(symbol),\r\n\t\t\t\t\t\t\tdocumentation: getSymbolDocumentation(symbol),\r\n\t\t\t\t\t\t\tsortText: `2_${symbol.name}`\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\titems.push(item);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconsole.log(`[COMPLETION] Returning ${items.length} symbols`);\r\n\t\t\t\t\treturn items;\r\n\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tconsole.error('[COMPLETION] Error getting scope symbols:', error);\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n        // └──────────────────────────────────────────────────────────────────────┘\r\n\r\n\r\n        // ┌──────────────────────────────── HELP ────────────────────────────────┐\r\n\r\n\t\t\tprivate setupHandlers(): void {\r\n\t\t\t\tthis.connection.onCompletion((params: TextDocumentPositionParams) => {\r\n\t\t\t\t\treturn this.handleCompletion(params);\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis.connection.onCompletionResolve((item: CompletionItem) => {\r\n\t\t\t\t\treturn this.handleCompletionResolve(item);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n        // └──────────────────────────────────────────────────────────────────────┘\r\n\r\n    }\r\n\r\n// ╚══════════════════════════════════════════════════════════════════════════════════════╝","// hover.ts — Hover information provider\r\n//\r\n// Developed with ❤️ by Maysara.\r\n\r\n\r\n\r\n// ╔════════════════════════════════════════ PACK ════════════════════════════════════════╗\r\n\r\n\timport { Connection, TextDocuments, TextDocumentPositionParams, Hover, MarkupKind }\r\n\t\t\t\t\t\t\t\t\tfrom 'vscode-languageserver';\r\n\timport { TextDocument } \t\tfrom 'vscode-languageserver-textdocument';\r\n\timport * as ProjectLib \t\t\tfrom '@je-es/project';\r\n\timport type { Syntax } \t\t\tfrom '@je-es/syntax';\r\n\timport { Span } \t\t\t\tfrom '@je-es/parser';\r\n\timport { determineProject, formatType, getScopeManager, getWordAndSpanAtPosition }\r\n\t\t\t\t\t\t\t\t\tfrom './common';\r\n\r\n// ╚══════════════════════════════════════════════════════════════════════════════════════╝\r\n\r\n\r\n\r\n// ╔════════════════════════════════════════ CORE ════════════════════════════════════════╗\r\n\r\n    export class HoverHandler {\r\n\r\n        // ┌──────────────────────────────── INIT ────────────────────────────────┐\r\n\r\n\t\t\tprivate connection\t: Connection;\r\n\t\t\tprivate projects\t: { main: ProjectLib.Project; anonymous: ProjectLib.Project };\r\n\t\t\tprivate documents\t: TextDocuments<TextDocument>;\r\n\t\t\tprivate syntax\t\t: Syntax;\r\n\r\n\t\t\tconstructor(\r\n\t\t\t\tconnection\t: Connection,\r\n\t\t\t\tdocuments\t: TextDocuments<TextDocument>,\r\n\t\t\t\tprojects\t: { main: ProjectLib.Project; anonymous: ProjectLib.Project },\r\n\t\t\t\tsyntax\t\t: Syntax\r\n\t\t\t) {\r\n\t\t\t\tthis.connection = connection;\r\n\t\t\t\tthis.documents \t= documents;\r\n\t\t\t\tthis.projects \t= projects;\r\n\t\t\t\tthis.syntax \t= syntax;\r\n\r\n\t\t\t\tthis.setupHandlers();\r\n\t\t\t}\r\n\r\n        // └──────────────────────────────────────────────────────────────────────┘\r\n\r\n\r\n        // ┌──────────────────────────────── MAIN ────────────────────────────────┐\r\n\r\n\t\t\tprivate handleHover(params: TextDocumentPositionParams): Hover | null {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconsole.log('[HOVER] Request received at position:', params.position);\r\n\r\n\t\t\t\t\tconst document = this.documents.get(params.textDocument.uri);\r\n\t\t\t\t\tif (!document) {\r\n\t\t\t\t\t\tconsole.warn('[HOVER] Document not found');\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst wordInfo = getWordAndSpanAtPosition(document, params.position);\r\n\t\t\t\t\tif (!wordInfo) {\r\n\t\t\t\t\t\tconsole.log('[HOVER] No word at position');\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst { word, span } = wordInfo;\r\n\t\t\t\t\tconsole.log(`[HOVER] Word: \"${word}\"`);\r\n\r\n\t\t\t\t\t// Check if it's a keyword\r\n\t\t\t\t\tif (this.syntax.isKeyword(word)) {\r\n\t\t\t\t\t\tconsole.log(`[HOVER] Found keyword: ${word}`);\r\n\t\t\t\t\t\treturn this.getKeywordHover(word);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Check if it's a builtin\r\n\t\t\t\t\tif (this.syntax.isBuiltin(word) || word === 'self') {\r\n\t\t\t\t\t\tconst doc = this.syntax.getBuiltinDoc(word);\r\n\t\t\t\t\t\tif (doc) {\r\n\t\t\t\t\t\t\tconsole.log(`[HOVER] Found builtin: ${word}`);\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tcontents: {\r\n\t\t\t\t\t\t\t\t\tkind: MarkupKind.Markdown,\r\n\t\t\t\t\t\t\t\t\tvalue: doc\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Look up symbol in scope manager\r\n\t\t\t\t\treturn this.getSymbolHover(document, params, word, span);\r\n\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tconsole.error('[HOVER] Error:', error);\r\n\t\t\t\t\tif (error instanceof Error) {\r\n\t\t\t\t\t\tconsole.error('[HOVER] Stack:', error.stack);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n        // └──────────────────────────────────────────────────────────────────────┘\r\n\r\n\r\n        // ┌──────────────────────────────── ---- ────────────────────────────────┐\r\n\r\n\t\t\tprivate getSymbolHover(\r\n\t\t\t\tdocument: TextDocument,\r\n\t\t\t\tparams: TextDocumentPositionParams,\r\n\t\t\t\tword: string,\r\n\t\t\t\tspan: Span\r\n\t\t\t): Hover | null {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst uri = params.textDocument.uri;\r\n\t\t\t\t\tconst text = document.getText();\r\n\r\n\t\t\t\t\t// Determine which project to use\r\n\t\t\t\t\tconst { project, modulePath, currentModuleName } = determineProject(uri, this.projects);\r\n\r\n\t\t\t\t\t// Run lint to get fresh scope manager state\r\n\t\t\t\t\tconsole.log('[HOVER] Running lint...');\r\n\t\t\t\t\tconst result = project.lint(text, modulePath);\r\n\r\n\t\t\t\t\t// Access scope manager\r\n\t\t\t\t\tconst scopeManager = getScopeManager(project);\r\n\t\t\t\t\tif (!scopeManager) {\r\n\t\t\t\t\t\tconsole.warn('[HOVER] Could not access scope manager');\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconsole.log(`[HOVER] Looking up \"${word}\" at span:`, span);\r\n\t\t\t\t\tconsole.log(`[HOVER] Current module: ${currentModuleName}`);\r\n\r\n\t\t\t\t\t// Use LSP-aware symbol lookup\r\n\t\t\t\t\tconst symbol = scopeManager.lookupSymbolFromLSP(word, span, currentModuleName);\r\n\r\n\t\t\t\t\tif (!symbol) {\r\n\t\t\t\t\t\tconsole.log(`[HOVER] Symbol \"${word}\" not found`);\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconsole.log(`[HOVER] Found symbol: ${word} (${symbol.kind})`);\r\n\t\t\t\t\treturn this.formatSymbolHover(symbol);\r\n\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tconsole.error('[HOVER] Error getting symbol hover:', error);\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tprivate getKeywordHover(keyword: string): Hover | null {\r\n\t\t\t\tconst doc = this.syntax.getKeywordDoc(keyword);\r\n\t\t\t\tif (!doc) return null;\r\n\r\n\t\t\t\tconst keywords = this.syntax.getLSPKeywords();\r\n\t\t\t\tif (!keywords) return null;\r\n\r\n\t\t\t\tconst parts: string[] = [];\r\n\t\t\t\tconst keywordType = keywords.types.includes(keyword) ? 'type' : 'keyword';\r\n\t\t\t\tparts.push(`**${keyword}** (${keywordType})`);\r\n\t\t\t\tparts.push('');\r\n\t\t\t\tparts.push('```kemet');\r\n\t\t\t\tparts.push(doc.signature);\r\n\t\t\t\tparts.push('```');\r\n\t\t\t\tparts.push('');\r\n\t\t\t\tparts.push(doc.description);\r\n\r\n\t\t\t\tif (doc.example) {\r\n\t\t\t\t\tparts.push('');\r\n\t\t\t\t\tparts.push('**Example:**');\r\n\t\t\t\t\tparts.push('```kemet');\r\n\t\t\t\t\tparts.push(doc.example);\r\n\t\t\t\t\tparts.push('```');\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tcontents: {\r\n\t\t\t\t\t\tkind: MarkupKind.Markdown,\r\n\t\t\t\t\t\tvalue: parts.join('\\n')\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tprivate formatSymbolHover(symbol: any): Hover {\r\n\t\t\t\tconst parts: string[] = [];\r\n\r\n\t\t\t\t// Header\r\n\t\t\t\tconst kindName = symbol.kind.toLowerCase();\r\n\t\t\t\tparts.push(`**${symbol.name}** (${kindName})`);\r\n\t\t\t\tparts.push('');\r\n\r\n\t\t\t\t// Signature/Type\r\n\t\t\t\tif (symbol.kind === 'Function') {\r\n\t\t\t\t\tparts.push('```kemet');\r\n\t\t\t\t\tconst visibility = symbol.visibility.kind === 'Public' ? 'pub ' : '';\r\n\t\t\t\t\tconst metadata = symbol.metadata || {};\r\n\t\t\t\t\tconst params = metadata.params || [];\r\n\t\t\t\t\tconst returnType = metadata.returnType ? formatType(metadata.returnType) : 'void';\r\n\t\t\t\t\tconst errorType = metadata.errorType ? formatType(metadata.errorType) : null;\r\n\r\n\t\t\t\t\tconst paramStrs = params.map((p: any) => {\r\n\t\t\t\t\t\tconst mut = p.mutability?.kind === 'Mutable' ? 'mut ' : '';\r\n\t\t\t\t\t\treturn `${mut}${p.name}: ${p.type ? formatType(p.type) : 'unknown'}`;\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tconst errorPart = errorType ? `${errorType}!` : '';\r\n\t\t\t\t\tparts.push(`${visibility}fn ${symbol.name}(${paramStrs.join(', ')}) -> ${errorPart}${returnType}`);\r\n\t\t\t\t\tparts.push('```');\r\n\t\t\t\t} else if (symbol.kind === 'Variable' || symbol.kind === 'Parameter') {\r\n\t\t\t\t\tparts.push('```kemet');\r\n\t\t\t\t\tconst visibility = symbol.visibility?.kind === 'Public' ? 'pub ' : '';\r\n\t\t\t\t\tconst mutability = symbol.mutability?.kind === 'Mutable' ? 'mut ' : '';\r\n\t\t\t\t\tconst typeStr = symbol.type ? formatType(symbol.type) : 'unknown';\r\n\t\t\t\t\tparts.push(`${visibility}let ${mutability}${symbol.name}: ${typeStr}`);\r\n\t\t\t\t\tparts.push('```');\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Additional info\r\n\t\t\t\tconst info: string[] = [];\r\n\t\t\t\tif (symbol.visibility?.kind === 'Public') info.push('**public**');\r\n\t\t\t\tif (symbol.mutability?.kind === 'Mutable') info.push('**mutable**');\r\n\t\t\t\tif (symbol.isExported) info.push('**exported**');\r\n\t\t\t\tif (symbol.metadata?.isBuiltin) info.push('**built-in**');\r\n\r\n\t\t\t\tif (info.length > 0) {\r\n\t\t\t\t\tparts.push('');\r\n\t\t\t\t\tparts.push(info.join(' • '));\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Module info\r\n\t\t\t\tif (symbol.module) {\r\n\t\t\t\t\tparts.push('');\r\n\t\t\t\t\tparts.push(`Module: \\`${symbol.module}\\``);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tcontents: {\r\n\t\t\t\t\t\tkind: MarkupKind.Markdown,\r\n\t\t\t\t\t\tvalue: parts.join('\\n')\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n        // └──────────────────────────────────────────────────────────────────────┘\r\n\r\n\r\n        // ┌──────────────────────────────── HELP ────────────────────────────────┐\r\n\r\n\t\t\tprivate setupHandlers(): void {\r\n\t\t\t\tthis.connection.onHover((params: TextDocumentPositionParams) => {\r\n\t\t\t\t\treturn this.handleHover(params);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n        // └──────────────────────────────────────────────────────────────────────┘\r\n\r\n    }\r\n\r\n// ╚══════════════════════════════════════════════════════════════════════════════════════╝","// settings.ts — Settings and configuration management.\r\n//\r\n// Developed with ❤️ by Maysara.\r\n\r\n\r\n\r\n// ╔════════════════════════════════════════ PACK ════════════════════════════════════════╗\r\n\r\n\timport { Connection } from 'vscode-languageserver';\r\n\r\n// ╚══════════════════════════════════════════════════════════════════════════════════════╝\r\n\r\n\r\n\r\n// ╔════════════════════════════════════════ TYPE ════════════════════════════════════════╗\r\n\r\n\texport interface ExtSettings {\r\n\t\tpath\t\t\t\t: string;\r\n\t\tshowWarnings?\t\t: boolean;\r\n\t\tshowInfos?\t\t\t: boolean;\r\n\t\tmaxDiagnostics?\t\t: number;\r\n\t\tenableMetrics?\t\t: boolean;\r\n\t}\r\n\r\n// ╚══════════════════════════════════════════════════════════════════════════════════════╝\r\n\r\n\r\n\r\n// ╔════════════════════════════════════════ CORE ════════════════════════════════════════╗\r\n\r\n    export class SettingsManager {\r\n\r\n        // ┌──────────────────────────────── INIT ────────────────────────────────┐\r\n\r\n\t\t\tprivate connection\t\t\t\t\t: Connection;\r\n\t\t\tprivate hasConfigurationCapability \t= true;\r\n\t\t\tprivate documentSettings \t\t\t= new Map<string, Thenable<ExtSettings>>();\r\n\r\n\t\t\tprivate globalSettings\t\t\t\t: ExtSettings;\r\n\r\n\t\t\tconstructor(connection: Connection) {\r\n\t\t\t\tthis.connection = connection;\r\n\t\t\t\tthis.globalSettings = this.createDefaultSettings();\r\n\t\t\t}\r\n\r\n        // └──────────────────────────────────────────────────────────────────────┘\r\n\r\n\r\n        // ┌──────────────────────────────── MAIN ────────────────────────────────┐\r\n\r\n\t\t\tgetDocumentSettings(resource: string): Thenable<ExtSettings> {\r\n\t\t\t\tif (!this.hasConfigurationCapability) {\r\n\t\t\t\t\treturn Promise.resolve(this.globalSettings);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet result = this.documentSettings.get(resource);\r\n\t\t\t\tif (!result) {\r\n\t\t\t\t\tresult = this.connection.workspace.getConfiguration({\r\n\t\t\t\t\t\tscopeUri: resource,\r\n\t\t\t\t\t\tsection: 'kemet'\r\n\t\t\t\t\t});\r\n\t\t\t\t\tthis.documentSettings.set(resource, result);\r\n\t\t\t\t}\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\r\n\t\t\tsetConfigurationCapability(hasCapability: boolean): void {\r\n\t\t\t\tthis.hasConfigurationCapability = hasCapability;\r\n\t\t\t}\r\n\r\n\t\t\thandleConfigurationChange(change: any): void {\r\n\t\t\t\tif (this.hasConfigurationCapability) {\r\n\t\t\t\t\tthis.documentSettings.clear();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.globalSettings = <ExtSettings>(\r\n\t\t\t\t\t\t(change.settings.kemet || this.createDefaultSettings())\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tclearDocumentSettings(resource: string): void {\r\n\t\t\t\tthis.documentSettings.delete(resource);\r\n\t\t\t}\r\n\r\n\t\t\tclearAllSettings(): void {\r\n\t\t\t\tthis.documentSettings.clear();\r\n\t\t\t}\r\n\r\n        // └──────────────────────────────────────────────────────────────────────┘\r\n\r\n\r\n        // ┌──────────────────────────────── HELP ────────────────────────────────┐\r\n\r\n\t\t\tcreateDefaultSettings(): ExtSettings {\r\n                return {\r\n\t\t\t\t\tpath\t\t\t\t: '',\r\n\t\t\t\t\tshowWarnings\t\t: true,\r\n\t\t\t\t\tshowInfos\t\t\t: true,\r\n\t\t\t\t\tmaxDiagnostics\t\t: 100,\r\n\t\t\t\t\tenableMetrics\t\t: false\r\n\t\t\t\t} as ExtSettings;\r\n            }\r\n\r\n        // └──────────────────────────────────────────────────────────────────────┘\r\n\r\n    }\r\n\r\n// ╚══════════════════════════════════════════════════════════════════════════════════════╝","// metrics.ts — Metrics and custom commands handler\r\n//\r\n// Developed with ❤️ by Maysara.\r\n\r\n\r\n\r\n// ╔════════════════════════════════════════ PACK ════════════════════════════════════════╗\r\n\r\n\timport { Connection } \tfrom 'vscode-languageserver';\r\n\timport * as ProjectLib \tfrom '@je-es/project';\r\n\r\n// ╚══════════════════════════════════════════════════════════════════════════════════════╝\r\n\r\n\r\n\r\n// ╔════════════════════════════════════════ TYPE ════════════════════════════════════════╗\r\n\r\n\texport interface ServerMetrics {\r\n\t\ttotalValidations\t\t: number;\r\n\t\ttotalErrors\t\t\t\t: number;\r\n\t\taverageValidationTime\t: number;\r\n\t\tcacheHitRate\t\t\t: number;\r\n\t}\r\n\r\n// ╚══════════════════════════════════════════════════════════════════════════════════════╝\r\n\r\n\r\n\r\n// ╔════════════════════════════════════════ CORE ════════════════════════════════════════╗\r\n\r\n    export class MetricsHandler {\r\n\r\n        // ┌──────────────────────────────── INIT ────────────────────────────────┐\r\n\r\n\t\t\tprivate connection\t\t\t: Connection;\r\n\t\t\tprivate projects\t\t\t: { main: ProjectLib.Project; anonymous: ProjectLib.Project };\r\n\t\t\tprivate serverMetrics\t\t: ServerMetrics;\r\n\r\n\t\t\tconstructor(\r\n\t\t\t\tconnection: Connection,\r\n\t\t\t\tprojects: { main: ProjectLib.Project; anonymous: ProjectLib.Project },\r\n\t\t\t\tserverMetrics: ServerMetrics\r\n\t\t\t) {\r\n\t\t\t\tthis.connection = connection;\r\n\t\t\t\tthis.projects = projects;\r\n\t\t\t\tthis.serverMetrics = serverMetrics;\r\n\r\n\t\t\t\tthis.setupHandlers();\r\n\t\t\t}\r\n\r\n        // └──────────────────────────────────────────────────────────────────────┘\r\n\r\n\r\n        // ┌──────────────────────────────── MAIN ────────────────────────────────┐\r\n\r\n\t\t\t// TODO..\r\n\r\n        // └──────────────────────────────────────────────────────────────────────┘\r\n\r\n\r\n        // ┌──────────────────────────────── HELP ────────────────────────────────┐\r\n\r\n\t\t\tprivate setupHandlers(): void {}\r\n\r\n        // └──────────────────────────────────────────────────────────────────────┘\r\n\r\n    }\r\n\r\n// ╚══════════════════════════════════════════════════════════════════════════════════════╝"],"mappings":"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","names":["CompletionItemKind","relative","CompletionItemKind","CompletionItemKind","CompletionItemKind","_a"]}